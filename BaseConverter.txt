# Enter assembler code here
#
# To add comments begin lines with #
# Code lines have 3 entries separated by tabs
# > First an optional label,
# > second an instruction mnemonic, and 
# > third an address label if required.
#
# Valid mnemonics are:
# HLT, ADD, SUB, STO, LDA,
# BR, BRZ, BRP, IN, OUT, DAT

# Variable Initialisation

	
# Get inputs; check if bases are < 11.
	IN
	STO	num
	IN
	STO	base_a
	SUB	eleven
	BRP	error
	IN
	STO	base_b
	SUB	eleven
	BRP	error

	
	LDA	one
	STO	step
	LDA	eleven
	SUB	one
	STO	ten
init	LDA	zero
	STO	q
	STO	inter
	STO	hold
	LDA	one
	STO	posit

# Extract the last digit of the number by finding number mod the base to which they are converted:
# First loop: number mod 10
# Second loop: number mod base_b
divide	LDA	num
	SUB	ten
	BRP	pos

# Check if the digit exceeds the base it is in now.
# E.g. 2 isn't supposed to appear in a binary number. If such thing is detected an error is returned.
	LDA	num
	SUB	base_a
	BRP	error


# Multiply the digit extracted by the value of base^position
# in the base from which they are converted

# First loop: Multiplying by base_a^position
# Second loop: Multiplying by 10^position
b_ten	LDA	num
	BRZ	finish
	SUB	one
	STO	num
	LDA	inter
	ADD	posit
	STO	inter
	BR	b_ten

# Increment the quotient by one and continue modding.
pos	STO	num
	LDA	q
	ADD	one
	STO	q
	BR	divide

# After the last digit is extracted and added, repeat the same procedure on the quotient to extract the next number until there is none left.
finish	LDA	q
	BRZ	change
	STO	num
	LDA	base_a
	STO	counter

# Also, update the position value by one position
# Round 1: move along position values 1, base_a, base_a^2...
# Round 2: move along position values 1, 10, 100...
times	LDA	counter
	BRZ	up_posi
	SUB	one
	STO	counter
	LDA	hold
	ADD	posit
	STO	hold

# Overflow error checker: if the program attempts to move from 100 to 1000, it means there is an overflow. Since 100 * 10 will result in 000, a BRZ will detect this error and return the error message.
	BRZ	error
	BR	times

# Reset variables so it's ready for the next round of extraction and multiplication
up_posi	LDA	hold
	STO	posit
	LDA	zero
	STO	counter
	STO	q
	STO	hold
	BR	divide

# Commence second loop.
change	LDA	step
	BRZ	result
	SUB	one
	STO	step
	LDA	inter
	STO	num
	LDA	ten
	STO	base_a
	LDA	base_b
	STO	ten
	BR	init
	
# Display error message
error	LDA	msg
	BR	end

# Display result
result	LDA	inter
end	OUT
	HLT

num	DAT
base_a	DAT
base_b	DAT
msg	DAT	999
zero	DAT	000
one	DAT	001
ten	DAT	010
eleven	DAT	011
q	DAT	000
counter	DAT	000
posit	DAT	001	
inter	DAT	000
hold	DAT	000
step	DAT	001



